generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma-types"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums

enum IntegrationType {
  GMAIL
  SLACK
}

enum IntegrationStatus {
  ACTIVE
  REVOKED
  EXPIRED
}

enum ActionType {
  SEND_EMAIL
  SEND_SLACK_MESSAGE
}

// Models

model User {
  id           String        @id
  name         String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  integrations Integration[]
  chats        Chat[]
}

model Integration {
  id        String            @id @default(uuid())
  userId    String
  type      IntegrationType
  status    IntegrationStatus @default(ACTIVE)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  user  User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  gmail GmailIntegration?
  slack SlackIntegration?
}

model GmailIntegration {
  id              String   @id @default(uuid())
  integrationId   String   @unique
  email           String   @unique
  accessToken     String
  refreshToken    String?
  tokenExpiration DateTime
  recentHistoryId String?

  integration Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  emails      Email[]
}

model SlackIntegration {
  id            String @id @default(uuid())
  integrationId String @unique
  teamId        String
  accessToken   String
  slackUserId   String @unique

  integration Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  messages    Message[]
}

model Email {
  id                 String    @id @default(uuid())
  messageId          String    @unique
  gmailIntegrationId String
  subject            String?
  from               String?
  date               DateTime?
  body               String?   @db.Text
  receivedAt         DateTime  @default(now())
  processed          Boolean   @default(false)

  gmailIntegration GmailIntegration @relation(fields: [gmailIntegrationId], references: [id], onDelete: Cascade)
}

model Message {
  id                 String   @id @default(uuid())
  messageId          String   @unique
  slackIntegrationId String
  senderId           String
  channelId          String
  text               String   @db.Text
  timestamp          String
  threadTs           String?
  receivedAt         DateTime @default(now())
  processed          Boolean  @default(false)

  slackIntegration SlackIntegration @relation(fields: [slackIntegrationId], references: [id], onDelete: Cascade)

  @@index([channelId, timestamp])
}

model Automation {
  id        String    @id @default(uuid())
  userId    String
  title     String    @default("Untitled Automation")
  lastRun   DateTime?
  createdAt DateTime  @default(now())

  trigger Trigger?
  actions Action[]
}

model Trigger {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  automationId String   @unique
  type         String
  createdAt    DateTime @default(now())

  automation Automation @relation(fields: [automationId], references: [id], onDelete: Cascade)
}

model Action {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  automationId String
  type         ActionType
  position     Float
  createdAt    DateTime   @default(now())

  automation Automation @relation(fields: [automationId], references: [id], onDelete: Cascade)
  actionData Json

  @@index([automationId, position])
}

model Chat {
  id        String   @id @default(uuid())
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages ChatMessage[]
}

model ChatMessage {
  id        String   @id @default(uuid())
  chatId    String
  content   String
  system    Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
}
