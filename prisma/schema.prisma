// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma-types"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums

enum IntegrationType {
  GMAIL
  SLACK
}

enum IntegrationStatus {
  ACTIVE
  REVOKED
  EXPIRED
}

// Models

model User {
  id           String        @id
  name         String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  integrations Integration[]
}

model Integration {
  id         String            @id @default(uuid())
  userId     String
  type       IntegrationType
  status     IntegrationStatus @default(ACTIVE)
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt

  user       User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  gmail      GmailIntegration?
  slack      SlackIntegration?
}

model GmailIntegration {
  id              String    @id @default(uuid())
  integrationId   String    @unique
  email           String    @unique
  accessToken     String
  refreshToken    String
  tokenExpiration DateTime
  recentHistoryId String?
  
  integration     Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  emails          Email[]
}

model SlackIntegration {
  id            String  @id @default(uuid())
  integrationId String  @unique
  teamId        String
  botToken      String
  appId         String
  
  integration   Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  messages      Message[]
}

model Email {
  id                String          @id @default(uuid())
  messageId         String          @unique
  gmailIntegrationId String
  subject           String?
  from              String?
  date              DateTime?
  body              String?         @db.Text
  receivedAt        DateTime        @default(now())
  processed         Boolean         @default(false)

  gmailIntegration  GmailIntegration @relation(fields: [gmailIntegrationId], references: [id], onDelete: Cascade)
}

model Message {
  id                 String           @id @default(uuid())
  messageId          String           @unique
  slackIntegrationId String
  userId             String
  channelId          String
  text               String           @db.Text
  timestamp          String
  threadTs           String?
  receivedAt         DateTime         @default(now())
  processed          Boolean          @default(false)

  slackIntegration   SlackIntegration @relation(fields: [slackIntegrationId], references: [id], onDelete: Cascade)

  @@index([channelId, timestamp])
}