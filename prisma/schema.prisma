generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma-types"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id
  name         String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  integrations Integration[] @relation("UserIntegrations")
}

enum IntegrationType {
  GMAIL
  SLACK
  OUTLOOK
  GITHUB
  GOOGLE_CALENDAR
}

enum GenericType {
  EMAIL
  CALENDAR
  TASK
  CHAT
}

enum IntegrationStatus {
  ACTIVE
  REVOKED
  EXPIRED
}

model Integration {
  id              String            @id @default(uuid())
  userId          String
  email           String?           @unique        
  type            IntegrationType
  providerUserId  String?
  accessToken     String
  refreshToken    String?
  tokenExpiration DateTime
  watchExpiration DateTime?
  recentHistoryId String?
  scopes          String[]
  createdAt       DateTime          @default(now())
  lastUsedAt      DateTime?
  lastRefreshedAt DateTime?
  status          IntegrationStatus @default(ACTIVE)
  genericType     GenericType      
  metadata        Json?
  user            User              @relation("UserIntegrations", fields: [userId], references: [id], onDelete: Cascade)
  emails          Email[]     @relation("IntegrationEmails")
}

model Email {
  id            String      @id @default(uuid())
  messageId     String      @unique
  integrationId String
  subject       String?
  from          String?
  date          DateTime?
  body          String?     @db.Text
  receivedAt    DateTime    @default(now())
  processed     Boolean     @default(false)
  integration   Integration @relation("IntegrationEmails", fields: [integrationId], references: [id], onDelete: Cascade)
}